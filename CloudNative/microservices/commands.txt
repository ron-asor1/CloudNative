## Commands

### .NET Commands

**Create and Run a .NET Web Application:**
```
dotnet new web -n ProductService
dotnet run
```

**Endpoints:**
```
http://localhost:
```

---

## Container

### Build and Run Docker Image

**Run on the same level as the Dockerfile:**
```
docker build -t productservice .
```

**See list of images:**
```
docker images
```

**Run Docker image:**
```
docker run -d -p 8080:80 --name productservicecontainer productservice
```

**Run Docker image in interactive mode:**
```
docker run -it --rm -p 8080:8080 --name productservicecontainer productservice
```

**Stop Docker image:**
```
docker stop productservicecontainer
```

**Login locally to Docker:**
```
docker login
```
> Automatically logs in if already signed in on the desktop.

**Tag image:**
```
docker tag productservice ronasor1/productservice:latest
```

**Push image:**
```
docker push ronasor1/productservice:latest
```

**DockerHub:**
```
https://hub.docker.com/repository/docker/ronasor1/productservice/general
```

### Container Flow
1. Write Dockerfile
2. Build Docker image
3. Run Docker container
4. Test run locally
5. Tag Docker container
6. Publish image to registry such as DockerHub
7. Deploy to cloud

---

## Pushing Docker Image to Amazon ECR

### Steps:
1. Create Amazon ECR repository
2. Authenticate Docker to Amazon ECR registry
3. Build Docker image
4. Tag Docker image
5. Push Docker image to Amazon ECR

**Create Amazon ECR Repository:**
```
Name - productservice
```

**Authenticate Docker to Amazon ECR registry:**
```
aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 688567289104.dkr.ecr.eu-north-1.amazonaws.com
```

**Build Docker image:**
```
docker build -t productservice .
```

**Tag Docker image:**
```
docker tag productservice:latest 688567289104.dkr.ecr.eu-north-1.amazonaws.com/productservice
```

**Push Docker image:**
```
docker push 688567289104.dkr.ecr.eu-north-1.amazonaws.com/productservice:latest
```

---

## Starting with Minikube

### Steps:
1. Start Docker Desktop
2. Start Minikube

**Interact with cluster:**
```
kubectl get po -A
```
> Alternative:
```
minikube kubectl -- get po -A
```

**Verify Kubernetes is running:**
```
minikube dashboard
```

---

## Exposing Ports in ASP.NET Container

### Configure to Listen on `0.0.0.0:8080`:

**Directly in Program:**
```csharp
var port = Environment.GetEnvironmentVariable("PORT") ?? "8080";
var url = $"http://0.0.0.0:{port}";
builder.WebHost.UseUrls(url);
```

**Using Dockerfile Environment Variables:**
```json
"environmentVariables": {
  "ASPNETCORE_URLS": "https://+:443;http://+:8080",
  "ASPNETCORE_HTTPS_PORT": "44360"
}
```
> [See GitHub Issue](https://github.com/dotnet/dotnet-docker/issues/3968)

**Inject Environment Variables in Kubernetes Deployment:**
```
kestrel__endpoints__http__url=http://0.0.0.0:8080
```

---

## Kubernetes Pods

**Definition:**
A pod is a container running in Kubernetes. Pods can be created:
- Imperatively via `kubectl` commands.
- Declaratively via configuration files.

### Creating Pod Definition

**Establish YAML file**

**View Pods:**
```
kubectl get pod
```

**View all Kubernetes traffic:**
```
kubectl get all
```

**Watch pods being created:**
```
kubectl get pods -watch
```

### Apply Configuration

**Create a Pod:**
```
kubectl apply -f product-pod.yaml
```

**Expose the Pod:**
```
kubectl port-forward product-pod 8080:8080
```

**Deployments:**
```
kubectl apply -f product-deploy.yaml
```

**Services:**
```
kubectl apply -f product-service.yaml
kubectl port-forward service/product-service 7080:8080
```

**Expose service with Minikube:**
```
minikube service product-service
```

### Cleanup

**Delete Pod:**
```
kubectl delete pod product-pod
```
> Or:
```
kubectl delete -f ./product-pod.yaml
```

---

## Ingress

**Define rules for external access to services via API calls.**

**Get Minikube IP:**
```
minikube ip
```
> Example:
```
192.168.49.2
```

**Edit Host File:**
```
# Added by Minikube custom domain
192.168.49.2 product.local
```

### Deploy Ingress:

1. Activate Ingress add-on:
```
minikube addons list
minikube addons enable ingress
minikube addons enable ingress-dns
```

2. Track Minikube:
```
minikube tunnel
```

3. Reach Product Service via Ingress:
```
http://product.local/api/products
```

---

## ConfigMap & Secret

**Create a secret key encoded in Base64:**
```
echo -n 'product-api-key' | base64
```
> Output:
```
cHJvZHVjdC1hcGkta2V5
```

**Additional Commands:**
```
kubectl get secret
kubectl get configmap
```

### Modify .NET Application to Use Environment Variables:

**In `program.cs`:**
```csharp
var logLevel = Environment.GetEnvironmentVariable("LOG_LEVEL");
var apiKey = Environment.GetEnvironmentVariable("API_KEY");
```

---

## Scaling Containers in Kubernetes

**Manually Scale via YAML File:**
- Modify replicas.

**Scale While Running:**

**Watch Live:**
```
kubectl get pod -w
```

**Scale Up:**
```
kubectl scale --replicas=5 deployment/product
```

**Scale Down:**
```
kubectl scale --replicas=1 deployment/product
```

**Failure Recovery:**
- Kubernetes auto-restarts failed pods to match replica count.

**Manually Test Auto-restart:**
```
kubectl delete pod <pod-name>
```
> Then verify:
```
kubectl get pod
```

---

## Deploy Application

**Sample Deployment:**
```
kubectl create deployment hello-minikube --image=ronasor1/productservice:latest
kubectl expose deployment hello-minikube --type=NodePort --port=8080
```

**Access Service:**
```
kubectl get services hello-minikube
minikube service hello-minikube
```

**Port-forward:**
```
kubectl port-forward service/hello-minikube 7080:8080
```
> Check:
```
http://localhost:7080/api/products
```

**Cleanup Local Machine:**
```
# Delete host entry
c:/windows/system32/drivers/etc/hosts

# Delete Kubernetes resources
kubectl delete -f ./product.yaml
kubectl delete deployment hello-minikube
kubectl delete service hello-minikube